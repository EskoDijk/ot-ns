#!/bin/bash
# Copyright (c) 2020-2023, The OTNS Authors.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# shellcheck source=script/common.sh
. "$(dirname "$0")"/common.sh

OT_DIR=${OT_DIR:-}

show_help()
{
    set +x
    echo -e "\nUsage: test <test-group-name-1> [<test-group-name-N>]* "
    echo -e "\nThe following test-group-names can be provided as arguments:"
    echo -e "  go-tests\n  py-unittests\n  py-examples\n  stress-tests"
    echo -e "  build-openthread\n  build-openthread-versions\n"
}

show_help_stress_tests()
{
    set +x
    echo -e "\nUsage: test stress-tests <stress-test-name>"
    echo -e "\nThe following stress-test-names can be provided as second argument:"
    echo -e "  network-forming\n  commissioning\n  connectivity\n  network-latency\n  multicast-performance"
    echo -e "  otns-performance\n  network-limits\n"
}

installed()
{
    command -v "$1" >/dev/null 2>&1
}

go_tests()
{
    install_deps
    install_otns
    build_openthread

    echo "" >coverage.txt

    PKG=$(go list ./...)

    pwd
    for d in $PKG; do
        go test -race -coverprofile=profile.out -covermode=atomic -coverpkg=./... "$d"
        if [ -f profile.out ]; then
            cat profile.out >>coverage.txt
            rm profile.out
        fi
    done
}

install_deps()
{
    ./script/install-deps
}

install_otns()
{
    ./script/install
}

get_openthread()
{
    if [[ -z $OT_DIR ]]; then
        OT_DIR=$PWD/ot-rfsim
        git submodule update --init --recursive --depth 1
    fi
}

get_openthread_versions()
{
    if [[ -z $OT_DIR ]]; then
        OT_DIR=$PWD/ot-rfsim
        git submodule update --init --recursive
    fi
}

build_openthread()
{
    get_openthread
    install_openthread_buildtools

    (
        # Note that OT_DIR points to the ot-rfsim submodule.
        cd "$OT_DIR"

        # TODO: MacOS CI build fails for empty options. So we give one option here that is anyway set.
        local options=("-DOT_OTNS=ON")

        local COVERAGE=${COVERAGE:-0}
        if [[ $COVERAGE == 1 ]]; then
            options+=(
                "-DOT_COVERAGE=ON"
            )
        fi

        ./script/build "${options[@]}"
        cp ./build/bin/ot-cli-ftd ./ot-versions
    )
}

build_openthread_versions()
{
    get_openthread_versions
    install_openthread_buildtools

    (
        # Note that OT_DIR points to the ot-rfsim submodule.
        cd "$OT_DIR"

        if [[ ! -f ./ot-versions/ot-cli-ftd_v11 ]]; then
            ./script/build_v11
        fi
        if [[ ! -f ./ot-versions/ot-cli-ftd_v12 ]]; then
            ./script/build_v12
        fi
        if [[ ! -f ./ot-versions/ot-cli-ftd_v13 ]]; then
            ./script/build_v13
        fi
        if [[ ! -f ./ot-versions/ot-cli-ftd ]]; then
            ./script/build_latest
        fi
    )
}

py_unittests()
{
    install_deps
    python3 -m pip install --user -r "$OTNSDIR"/pylibs/unittests/requirements.txt
    install_otns
    build_openthread_versions

    python3 "$OTNSDIR"/pylibs/unittests/test_basic.py
    python3 "$OTNSDIR"/pylibs/unittests/test_ping.py
    python3 "$OTNSDIR"/pylibs/unittests/test_commissioning.py
    python3 "$OTNSDIR"/pylibs/unittests/test_signals.py
    python3 "$OTNSDIR"/pylibs/unittests/test_radiomodels.py
    python3 "$OTNSDIR"/pylibs/unittests/test_csl.py
    python3 "$OTNSDIR"/pylibs/unittests/test_exe_versions.py
}

check_py_example()
{
    echo "Checking pyOTNS example: $1 ..."
    python3 "$1" &
    local pid=$!
    sleep 10
    killall otns || true
    wait $pid || die "Run pyOTNS example failed :$1"
}

py_examples()
{
    install_deps
    install_otns
    build_openthread
    check_py_example "$OTNSDIR"/pylibs/examples/simple.py
    check_py_example "$OTNSDIR"/pylibs/examples/ping.py
    check_py_example "$OTNSDIR"/pylibs/examples/farm.py
}

stress_tests()
{
    install_deps
    install_otns
    build_openthread
    python3 "$OTNSDIR"/pylibs/stress_tests/run_stress_suite.py "$@"
}

main()
{
    if [ "$#" -eq 0 ]; then
        show_help
        return 1
    fi

    while (("$#")); do
        case "$1" in
            go-tests)
                go_tests
                shift 1
                ;;
            py-unittests)
                py_unittests
                shift 1
                ;;
            py-examples)
                py_examples
                shift 1
                ;;
            stress-tests)
                if [ "$#" -le 1 ]; then
                    show_help_stress_tests
                    return 1
                fi
                stress_tests "$2"
                shift 2
                ;;
            build-openthread)
                build_openthread
                shift 1
                ;;
            build-openthread-versions)
                build_openthread_versions
                shift 1
                ;;
            *)
                echo "Error: Unsupported test $1" >&2
                show_help
                return 1
                ;;
        esac
    done
}

main "$@"
